# Copyright (c) 2022, SAS Institute Inc., Cary, NC, USA.  All Rights Reserved.
# SPDX-License-Identifier: Apache-2.0
import json
from io import StringIO
from pathlib import Path

import pandas as pd

from .._services.model_repository import ModelRepository as mr
from ..core import current_session, is_uuid

# TODO: Convert STRINGIO calls to string or dict format


def _find_file(model, file_name):
    """
    Retrieves the first file from a registered model on SAS Model Manager that contains the provided
    file_name as an exact match or substring.

    Parameters
    ----------
    model : str or dict
        The name or id of the model, or a dictionary representation of the model.
    file_name : str
        The name of the desired file, or a substring that is contained within the file name.

    Returns
    -------
    RestObj
        The first file with a name containing file_name.
    """

    sess = current_session()
    file_list = mr.get_model_contents(model)
    for file in file_list:
        print(file.name)
        if file_name.lower() in file.name.lower():
            correct_file = sess.get(
                f"modelRepository/models/{model}/contents/{file.id}/content"
            )
            return correct_file


class ModelParameters:
    @classmethod
    def generate_hyperparameters(cls, model, model_prefix, pickle_path):
        """
        Generates hyperparameters for a given model and creates a JSON file representation.

        Currently only supports generation of scikit-learn model hyperparameters.

        Parameters
        ----------
        model : Python object
            Python object representing the model.
        model_prefix : str
            Name used to create model files. (e.g. (modelPrefix) + "Hyperparameters.json")
        pickle_path : str, Path
            Directory location of model files.

        Yields
        ------
        JSON file
            Named {model_prefix}Hyperparameters.json.
        """

        def sklearn_params():
            """
            Generates hyperparameters for the models generated by scikit-learn.
            """
            hyperparameters = model.get_params()
            model_json = {"hyperparameters": hyperparameters}
            with open(
                Path(pickle_path) / f"{model_prefix}Hyperparameters.json", "w"
            ) as f:
                f.write(json.dumps(model_json, indent=4))

        if all(hasattr(model, attr) for attr in ["_estimator_type", "get_params"]):
            sklearn_params()
        else:
            raise ValueError(
                "This model type is not currently supported for hyperparameter generation."
            )

    @classmethod
    def update_kpis(
        cls,
        project,
        server="cas-shared-default",
        caslib="ModelPerformanceData",
    ):
        """
        Updates hyperparameter file to include KPIs generated by performance definitions, as well
        as any custom KPIs imported by user to the SAS KPI data table.

        Parameters
        ----------
        project : str or dict
            The name or id of the project, or a dictionary representation of the project.
        server : str, optional
            Server on which the KPI data table is stored. Defaults to "cas-shared-default".
        caslib : str, optional
            CAS Library on which the KPI data table is stored. Defaults to "ModelPerformanceData".
        """
        kpis = get_project_kpis(project, server, caslib)
        models_to_update = kpis["ModelUUID"].unique().tolist()
        for model in models_to_update:
            current_params = _find_file(model, "hyperparameters")
            current_json = current_params.json()
            model_rows = kpis.loc[kpis["ModelUUID"] == model]
            model_rows.set_index("TimeLabel", inplace=True)
            kpi_json = model_rows.to_json(orient="index")
            parsed_json = json.loads(kpi_json)
            current_json["kpis"] = parsed_json
            file_name = "{}Hyperparameters.json".format(
                current_json["kpis"][list(current_json["kpis"].keys())[0]]["ModelName"]
            )
            mr.add_model_content(
                model,
                StringIO(json.dumps(current_json, indent=4)),
                file_name,
            )

    @classmethod
    def get_hyperparameters(cls, model):
        """
        Retrieves the hyperparameter json file from specified model on SAS Model Manager.

        Parameters
        ----------
        model : str or dict
            The name or id of the model, or a dictionary representation of the model.

        Returns
        -------
        dict
            Dictionary containing the contents of the hyperparameter file.
        """
        if mr.is_uuid(model):
            id_ = model
        elif isinstance(model, dict) and "id" in model:
            id_ = model["id"]
        else:
            model = mr.get_model(model)
            id_ = model["id"]
        file = _find_file(id_, "hyperparameters")
        return file.json()

    @classmethod
    def add_hyperparameters(cls, model, **kwargs):
        """
        Adds custom hyperparameters to the hyperparameter file contained within the model in SAS Model Manager.

        Parameters
        ----------
        model : str or dict
            The name or id of the model, or a dictionary representation of the model.
        kwargs
            Named variables pairs representing hyperparameters to be added to the hyperparameter file.
        """

        if not isinstance(model, dict):
            model = mr.get_model(model)
        hyperparameters = cls.get_hyperparameters(model.id)
        for key, value in kwargs.items():
            hyperparameters["hyperparameters"][key] = value
        mr.add_model_content(
            model,
            StringIO(json.dumps(hyperparameters, indent=4)),
            f"{model.name}Hyperparameters.json",
        )



def get_project_kpis(
    project,
    server="cas-shared-default",
    caslib="ModelPerformanceData",
    filterColumn=None,
    filterValue=None,
):
    """Create a call to CAS to return the MM_STD_KPI table (Model Manager Standard KPI)
    generated when custom KPIs are uploaded or when a performance definition is executed
    on SAS Model Manager on SAS Viya 4.

    Filtering options are available as additional arguments. The filtering is based on
    column name and column value. Currently, only exact matches are available when filtering
    by this method.

    Parameters
    ----------
    project : str or dict
        The name or id of the project, or a dictionary representation of
        the project.
    server : str, optional
        SAS Viya 4 server where the MM_STD_KPI table exists,
        by default "cas-shared-default"
    caslib : str, optional
        SAS Viya 4 caslib where the MM_STD_KPI table exists,
        by default "ModelPerformanceData"
    filterColumn : str, optional
        Column name from the MM_STD_KPI table to be filtered, by default None
    filterValue : str, optional
        Column value to be filtered, by default None
    Returns
    -------
    kpiTableDf : DataFrame
        A pandas DataFrame representing the MM_STD_KPI table. Note that SAS
        missing values are replaced with pandas valid missing values.
    """
    from distutils.version import StrictVersion

    # Check the pandas version for where the json_normalize function exists
    if pd.__version__ >= StrictVersion("1.0.3"):
        from pandas import json_normalize
    else:
        from pandas.io.json import json_normalize

    # Collect the current session for authentication of API calls
    sess = current_session()

    # Step through options to determine project UUID
    if is_uuid(project):
        projectId = project
    elif isinstance(project, dict) and "id" in project:
        projectId = project["id"]
    else:
        project = mr.get_project(project)
        projectId = project["id"]

    # TODO: include case for large MM_STD_KPI tables
    # Call the casManagement service to collect the column names in the table
    kpiTableColumns = sess.get(
        "casManagement/servers/{}/".format(server)
        + "caslibs/{}/tables/".format(caslib)
        + "{}.MM_STD_KPI/columns?limit=10000".format(projectId)
    )
    if not kpiTableColumns:
        project = mr.get_project(project)
        raise SystemError(
            "No KPI table exists for project {}.".format(project.name)
            + " Please confirm that the performance definition completed"
            + " or custom KPIs have been uploaded successfully."
        )
    # Parse through the json response to create a pandas DataFrame
    cols = json_normalize(kpiTableColumns.json(), "items")
    # Convert the columns to a readable list
    colNames = cols["name"].to_list()

    # Filter rows returned by column and value provided in arguments
    whereStatement = ""
    if filterColumn and filterValue:
        whereStatement = "&where={}='{}'".format(filterColumn, filterValue)

    # Call the casRowSets service to return row values; optional where statement is included
    kpiTableRows = sess.get(
        "casRowSets/servers/{}/".format(server)
        + "caslibs/{}/tables/".format(caslib)
        + "{}.MM_STD_KPI/rows?limit=10000".format(projectId)
        + "{}".format(whereStatement)
    )
    # If no "cells" are found in the json response, return an error based on provided arguments
    try:
        kpiTableDf = pd.DataFrame(
            json_normalize(kpiTableRows.json()["items"])["cells"].to_list(),
            columns=colNames,
        )
    except KeyError:
        if filterColumn and filterValue:
            raise SystemError(
                "No KPIs were found when filtering with {}='{}'.".format(
                    filterColumn, filterValue
                )
            )
        else:
            projectName = mr.get_project(project)["name"]
            raise SystemError("No KPIs were found for project {}.".format(projectName))

    # Strip leading spaces from all cells of KPI table and convert missing values to None
    kpiTableDf = kpiTableDf.apply(lambda x: x.str.strip()).replace([".", ""], None)

    return kpiTableDf
